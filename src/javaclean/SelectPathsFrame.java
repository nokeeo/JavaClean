/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package javaclean;

import java.io.File;
import javax.swing.*;
/**
 *
 * @author ericlee
 */
public class SelectPathsFrame extends javax.swing.JFrame {
    
    /**
     * Creates new form SelectPathsFrame
     */
    public SelectPathsFrame() {
        initComponents();
        this.fileChooser = new JFileChooser();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sourcePathTextField = new javax.swing.JTextField();
        configPathLabel = new javax.swing.JLabel();
        selectConfigButton = new javax.swing.JButton();
        sourcePathLabel = new javax.swing.JLabel();
        configPathTextField = new javax.swing.JTextField();
        selectSourceButton = new javax.swing.JButton();
        destinationPathLabel = new javax.swing.JLabel();
        destinationPathTextField = new javax.swing.JTextField();
        selectDestinationButton = new javax.swing.JButton();
        sortButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        sourcePathTextField.setEditable(false);
        sourcePathTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sourcePathTextFieldActionPerformed(evt);
            }
        });

        configPathLabel.setText("Config File:");

        selectConfigButton.setText("Select");
        selectConfigButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectConfigButtonActionPerformed(evt);
            }
        });

        sourcePathLabel.setText("Source Path:");

        configPathTextField.setEditable(false);
        configPathTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                configPathTextFieldActionPerformed(evt);
            }
        });

        selectSourceButton.setText("Select");
        selectSourceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectSourceButtonActionPerformed(evt);
            }
        });

        destinationPathLabel.setText("Destination Path:");

        destinationPathTextField.setEditable(false);
        destinationPathTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                destinationPathTextFieldActionPerformed(evt);
            }
        });

        selectDestinationButton.setText("Select");
        selectDestinationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectDestinationButtonActionPerformed(evt);
            }
        });

        sortButton.setText("Sort");
        sortButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortButtonActionPerformed(evt);
            }
        });

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(destinationPathLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(destinationPathTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(sourcePathLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(configPathLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(43, 43, 43)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(configPathTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
                                    .addComponent(sourcePathTextField))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(196, Short.MAX_VALUE)
                        .addComponent(sortButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clearButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(selectConfigButton)
                        .addComponent(selectSourceButton, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addComponent(selectDestinationButton, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(exitButton))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(configPathLabel)
                    .addComponent(selectConfigButton)
                    .addComponent(configPathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sourcePathLabel)
                    .addComponent(sourcePathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectSourceButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(destinationPathLabel)
                    .addComponent(destinationPathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectDestinationButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sortButton)
                    .addComponent(exitButton)
                    .addComponent(clearButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sourcePathTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sourcePathTextFieldActionPerformed
    }//GEN-LAST:event_sourcePathTextFieldActionPerformed

    private void selectConfigButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectConfigButtonActionPerformed
        this.fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        String path = this.selectFile(this.configPathTextField);
        if(path != null)
            this.configPathTextField.setText(path);
    }//GEN-LAST:event_selectConfigButtonActionPerformed

    private void configPathTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_configPathTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_configPathTextFieldActionPerformed

    private void selectSourceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectSourceButtonActionPerformed
        this.fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        String path = this.selectFile(this.sourcePathTextField);
        if(path != null)
            this.sourcePathTextField.setText(path);
    }//GEN-LAST:event_selectSourceButtonActionPerformed

    private void destinationPathTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_destinationPathTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_destinationPathTextFieldActionPerformed

    private void selectDestinationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectDestinationButtonActionPerformed
        this.fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        String path = this.selectFile(this.destinationPathTextField);
        if(path != null)
            this.destinationPathTextField.setText(path);
    }//GEN-LAST:event_selectDestinationButtonActionPerformed

    private void sortButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortButtonActionPerformed
        String configPath = this.configPathTextField.getText();
        String sourcePath = this.sourcePathTextField.getText();
        String destinationPath = this.destinationPathTextField.getText();
        
        if(this.checkTextFields()) {
            DirectoryStructure dirStructure = XMLConfigReader.parseFile(configPath);
            FileMover fileMover = new FileMover(dirStructure, sourcePath, destinationPath);
            fileMover.moveFiles();
        }
        
        else {
            JOptionPane.showMessageDialog(this, "No fields may be empty.", "", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_sortButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        int confirmReturn = JOptionPane.showConfirmDialog(this, "Are you sure you want to quit?", "", JOptionPane.YES_NO_OPTION);
        
        if(confirmReturn == JOptionPane.YES_OPTION)
            System.exit(1);
    }//GEN-LAST:event_exitButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        this.sourcePathTextField.setText("");
        this.destinationPathTextField.setText("");
        this.configPathTextField.setText("");
        
        //Reset the JFileChooser
        this.fileChooser = new JFileChooser();
    }//GEN-LAST:event_clearButtonActionPerformed

    
    private String selectFile(JTextField displayTextField) {
        String currentText = displayTextField.getText();
        if(!currentText.equals(""))
            this.fileChooser.setCurrentDirectory(new File(currentText));
        
        int fcReturn = this.fileChooser.showDialog(this, null);
        
        if(fcReturn == JFileChooser.APPROVE_OPTION) {
            File selectedFile = this.fileChooser.getSelectedFile();
            return selectedFile.getAbsolutePath();
        }
        else
            return null;
    }
    
    private boolean checkTextFields() {
        if(this.configPathTextField.getText().equals(""))
            return false;
        else if(this.sourcePathTextField.getText().equals(""))
            return false;
        else if(this.destinationPathTextField.getText().equals(""))
            return false;
        else
            return true;
    }
    
    private void disableButtons() {
        this.selectConfigButton.setEnabled(false);
        this.selectSourceButton.setEnabled(false);
        this.selectDestinationButton.setEnabled(false);
        this.exitButton.setEnabled(false);
        this.clearButton.setEnabled(false);
        this.sortButton.setEnabled(false);
    }
    
    private void enableButtons() {
        this.selectConfigButton.setEnabled(true);
        this.selectSourceButton.setEnabled(true);
        this.selectDestinationButton.setEnabled(true);
        this.exitButton.setEnabled(true);
        this.clearButton.setEnabled(true);
        this.sortButton.setEnabled(true);
    }
    
    private JFileChooser fileChooser;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearButton;
    private javax.swing.JLabel configPathLabel;
    private javax.swing.JTextField configPathTextField;
    private javax.swing.JLabel destinationPathLabel;
    private javax.swing.JTextField destinationPathTextField;
    private javax.swing.JButton exitButton;
    private javax.swing.JButton selectConfigButton;
    private javax.swing.JButton selectDestinationButton;
    private javax.swing.JButton selectSourceButton;
    private javax.swing.JButton sortButton;
    private javax.swing.JLabel sourcePathLabel;
    private javax.swing.JTextField sourcePathTextField;
    // End of variables declaration//GEN-END:variables
}
